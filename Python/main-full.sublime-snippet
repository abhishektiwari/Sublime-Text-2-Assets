<snippet>
<content>
<![CDATA[
import sys
import getopt

class Usage(Exception):
	"""
	Usage() exception class, which we catch in an except clause at the 
	end of main()
	"""
	def __init__(self, msg):
		self.msg = msg
        
def main(argv = None):
	"""
	Description of main() function, if required collect the command line
	arguments, and activate further anlysis. 
	"""
	# An optional 'argv' argument, which allows us to call it from the 
	# interactive Python prompt
	if argv is None:
		argv = sys.argv
	try:
		try:
			opts, args = getopt.getopt(argv[1:], "h", ["help"])
		except getopt.error, msg:
			raise Usage(msg)
		# Option processing
		for option, value in opts:
			if option in ("-h","--help"):
				raise Usage(__doc__)
				sys.exit(0)
			${1:}
		# Argument processing
		for argument in args:
			argument.strip()
			${2:}
	except Usage, err:
		print >>sys.stderr, err.msg
		print >>sys.stderr, "for help use --help"
		return 2


if __name__ == "__main__":
	"""
	The main program collected into function main()
	"""
	sys.exit(main())
]]>
</content>
	<tabTrigger>main</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.python</scope>
</snippet>
